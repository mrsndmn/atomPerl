TYPEMAP
MATRIX*		T_AVREF

INPUT
T_AVREF
	{	
		int checkpoint = PL_sv_count;
		if (!SvOK($arg) || !SvROK($arg)) croak(\"Ref?\");
		AV *tm__p = (AV*)SvRV($arg);

		if (SvTYPE(tm__p)!=SVt_PVAV) croak(\"Not ARRAY\");
		AV* tm_p = (AV*)tm__p;
		
		$type m = malloc(sizeof(MATRIX));

		SV **first =  av_fetch (tm_p, 0, 0);
		// sv_dump(tm_p);
		if ( ! ( SvOK(*first) && SvROK(*first) && SvTYPE(SvRV(*first)) == SVt_PVAV ) ) croak(\"arg must be arref of arref111\");
		
		AV *inner = (AV*)SvRV(*first);
		
		int heigth = av_len(tm_p); // av_len is not length but last index!!!
		int width = av_len(inner);

		m->heigth = heigth+1;
		m->width = width+1;
		// printf(\"h: %d \\nw: %d\\n\",m->heigth, m->width);
		m->cell = (int**)malloc(heigth * sizeof(int*));

		for (int i =0; i <= heigth; ++i) {
			SV **_next =  av_fetch (tm_p, i, 0);
			if ( ! (SvOK(*_next) && SvROK(*_next) && SvTYPE(SvRV(*_next)) == SVt_PVAV ) ) croak(\"arg must be arref of arref\");
			AV *next = (AV*)SvRV(*_next);
			if (av_len(next) != width) croak(\"matrix must be rectangular \", av_len(next),\" \", width);

			m->cell[i] = (int*)malloc(width * sizeof(int));
			
			for (int j = 0; j <= width; ++j) {
				SV **_value =  av_fetch (next, j, 0);
				if(!SvOK(*_value)) croak(\"cant fill the matrix\");
				m->cell[i][j] = SvIV(*_value);
				// printf(\"%d \", m->cell[i][j]);
			}
			// printf(\"\\n\");
		}
		$var = ($type)m;

	}


OUTPUT
T_AVREF
	{	
		// in XS.c, ST 0 already mortal
		//	ST(0) = sv_newmortal();

		//RETVAL ST(0) MATRIX *
		// \$var \$arg \$type
		
		// printf(\"%d\\n\", $var->width);
		// printf(\"%d\\n\", $var->heigth);

		AV *array = (AV*)newAV();

		for (int i = 0; i < $var->heigth; i++) {
			AV *inner = (AV*)newAV();		
			for (int j = 0; j < $var->heigth; j++) {
				av_push(inner, (SV*)newSViv($var->cell[i][j]));
			}
			av_push(array, (SV*)newRV((SV*)inner));
			free($var->cell[i]);
		}
		free($var->cell);		
		// sv_dump((SV*)array);
		sv_setsv($arg, (SV*)newRV_noinc((SV*)array));
	}	

